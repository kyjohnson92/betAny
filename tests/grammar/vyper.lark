// Vyper grammar for Lark
// Adapted from Lark repo. https://github.com/lark-parser/lark/blob/master/examples/python3.lark
// Adapted from: https://docs.python.org/3/reference/grammar.html
// Adapted by: Erez Shinan

// Start symbols for the grammar:
//       single_input is a single interactive statement;
//       file_input is a module or sequence of commands read from an input file;
//       eval_input is the input for the eval() functions.
// NB: compound_stmt in single_input is followed by extra NEWLINE!
single_input: _NEWLINE | simple_stmt | compound_stmt _NEWLINE
file_input: (_NEWLINE | stmt)*
eval_input: testlist _NEWLINE*

decorator: "@" decorator_names _NEWLINE
         | "@" decorator_with_args_names [ "(" [arguments] ")" ] _NEWLINE
decorators: decorator+
decorated: decorators (funcdef)

funcdef: "def" NAME "(" parameters? ")" ["->" test] ":" suite

parameters: paramvalue ("," paramvalue?)*

?paramvalue: typedparam ["=" test]
?typedparam: NAME [":" test]

?stmt: simple_stmt | compound_stmt
?simple_stmt: small_stmt (small_stmt)* _NEWLINE
?small_stmt: (expr_stmt | pass_stmt | flow_stmt | import_stmt | assert_stmt)
?expr_stmt: testlist_star_expr (annassign | augassign (testlist)
         | ("=" (testlist_star_expr))*)
annassign: ":" test ["=" test]
?testlist_star_expr: (test) ("," (test))* [","]
!augassign: ("+=" | "-=" | "*=" | "/=" | "**=" | "%=")
// For normal and annotated assignments, additional restrictions enforced by the interpreter
pass_stmt: "pass"
?flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [testlist]
raise_stmt: "raise" [test ["from" test]]
import_stmt: import_name | import_from
import_name: "import" dotted_as_names
import_from: "from" (dots? dotted_name | dots) "import" ("*" | "(" import_as_names ")" | import_as_names)
!dots: "."+
import_as_name: NAME ["as" NAME]
dotted_as_name: dotted_name ["as" NAME]
import_as_names: import_as_name ("," import_as_name)* [","]
dotted_as_names: dotted_as_name ("," dotted_as_name)*
dotted_name: NAME ("." NAME)*
decorator_names: ("private"|"public"|"payable"|"constant"|"payable")
decorator_with_args_names: ("nonreentrant")
assert_stmt: "assert" test ["," test]

compound_stmt: if_stmt | for_stmt | classdef | funcdef | decorated
if_stmt: "if" test ":" suite ("elif" test ":" suite)* ["else" ":" suite]
for_stmt: "for" exprlist "in" testlist ":" suite ["else" ":" suite]

// // NB compile.c makes sure that the default except clause is last
// except_clause: "except" [test ["as" NAME]]
suite: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

?test: or_test ["if" or_test "else" test]
?test_nocond: or_test
?or_test: and_test ("or" and_test)*
?and_test: not_test ("and" not_test)*
?not_test: "not" not_test -> not
         | comparison
?comparison: expr (_comp_op expr)*
?expr: arith_expr
?arith_expr: term (_add_op term)*
?term: factor (_mul_op factor)*
?factor: _factor_op factor | power

!_factor_op: "+"|"-"
!_add_op: "+"|"-"
!_shift_op: "<<"|">>"
!_mul_op: "*"|"/"|"%"
!_comp_op: "<"|">"|"=="|">="|"<="|"!="|"in"|"not" "in"|"is"|"is" "not"

?power: atom_expr ["**" factor]

?atom_expr: atom_expr "(" [arguments] ")"      -> funccall
          | atom_expr "[" subscriptlist "]"  -> getitem
          | atom_expr "." NAME               -> getattr
          | atom

?atom: "(" [testlist_comp] ")" -> tuple
     | "[" [testlist_comp] "]"  -> list
     |"{" [dictmaker] "}" -> dict
     | NAME -> var
     | number | string+
     | "(" test ")"
     | "True"    -> const_true
     | "False"   -> const_false

?testlist_comp: (test) [("," (test))+ [","] | ","]
subscriptlist: subscript ("," subscript)*
subscript: test
exprlist: (expr) ("," (expr))* [","]
testlist: test ("," test)* [","]
dictmaker: ( ((test ":" test) ("," (test ":" test))* [","]) )

classdef: ("contract"|"struct") NAME ["(" [arguments] ")"] ":" suite

arguments: argvalue ("," argvalue)*  // [","]
         | test comp_for

?argvalue: test ["=" test]


comp_iter: comp_for | comp_if
comp_for: "for" exprlist "in" or_test [comp_iter]
comp_if: "if" test_nocond [comp_iter]

// not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl: NAME


number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER
string: STRING | LONG_STRING
// Tokens

NAME: /[a-zA-Z_]\w*/
COMMENT: /#[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+


STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

DEC_NUMBER: /0|[1-9]\d*/i
HEX_NUMBER.2: /0x[\da-f]*/i
OCT_NUMBER.2: /0o[0-7]*/i
BIN_NUMBER.2 : /0b[0-1]*/i
FLOAT_NUMBER.2: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT
